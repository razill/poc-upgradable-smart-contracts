(* SPDX-License-Identifier: GPL-3.0 *)
scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils IntUtils

library State

let zero_address = 0x0000000000000000000000000000000000000000
let false = False
let true = True

(* Error exceptions *)
type Error =
  | NotMultiSigError
  | NotOperatorError
  | ZeroAddressError

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | NotMultiSigError                    => Int32 -1
      | NotOperatorError                    => Int32 -2
      | ZeroAddressError                    => Int32 -3
      end
    in
    { _exception : "Error"; source : "State"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract State(multiSig: ByStr20)

field proxy: ByStr20 = zero_address

field transfer : Map ByStr20 (Map ByStr20 (Map ByStr20 Uint256)) = Emp ByStr20 (Map ByStr20 (Map ByStr20 Uint256))

field welcome_msg : String = ""

(* Procedures *)
procedure Throw(error : Error)
  e = make_error error;
  throw e
end

procedure RequireNonZeroAddress(to: ByStr20)
  (* Reference: https://github.com/ConsenSys/smart-contract-best-practices/blob/master/docs/tokens.md *)
  is_zero_address = builtin eq to zero_address;
  match is_zero_address with
  | False =>
  | True =>
    error = ZeroAddressError;
    Throw error
  end
end

procedure RequireProxy()
  current_proxy <- proxy;
  RequireNonZeroAddress current_proxy;
  is_proxy = builtin eq current_proxy _sender;
  match is_proxy with
  | True =>
  | False =>
    error = NotOperatorError;
    Throw error
  end
end

procedure UpdateZRC2Transfer_(token: ByStr20, from: ByStr20, to: ByStr20, amount: Uint256)
  transfer[token][from][to] := amount
end

(* @multi-sig *)
transition updateProxy(to: ByStr20)
  RequireNonZeroAddress to;
  is_valid = builtin eq multiSig _sender;
  match is_valid with
  | False =>
    error = NotMultiSigError;
    Throw error
  | True =>
    cur_bnum <- & BLOCKNUMBER;
    proxy := to;
    e = { 
      _eventname: "ProxyUpdated";
      address: to;
      when: cur_bnum
    };
    event e
  end
end

transition SampleZRC2Transfer(token: ByStr20, from: ByStr20, to: ByStr20, amount: Uint256)
  RequireProxy;
  UpdateZRC2Transfer_ token from to amount
end