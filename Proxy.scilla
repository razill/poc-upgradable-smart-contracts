(* SPDX-License-Identifier: GPL-3.0 *)
scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils IntUtils

library Proxy

let zero_address = 0x0000000000000000000000000000000000000000
let false = False
let true = True

let one_msg = 
  fun (msg : Message) => 
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

type Order = 
| Order of ByStr20 BNum

type OrderParam =
| OrderParam of ByStr20 Uint256 ByStr20 Uint128 Uint32 BNum

(* Error exceptions *)
type Error =
  | NotPausedError
  | PausedError
  | ZeroAddressError
  | NotMultiSigError

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | NotPausedError                      => Int32 -1
      | PausedError                         => Int32 -2
      | ZeroAddressError                    => Int32 -3
      | NotMultiSigError                    => Int32 -4
      end
    in
    { _exception : "Error"; source : "Proxy"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract Proxy(multiSig: ByStr20)

field logic: ByStr20 = zero_address

field is_paused: Bool = false

(* Procedures *)
procedure Throw(error : Error)
  e = make_error error;
  throw e
end

procedure RequireNonZeroAddress(to: ByStr20)
  (* Reference: https://github.com/ConsenSys/smart-contract-best-practices/blob/master/docs/tokens.md *)
  is_zero_address = builtin eq to zero_address;
  match is_zero_address with
  | False =>
  | True =>
    error = ZeroAddressError;
    Throw error
  end
end

(* @multi-sig *)
transition UpdateLogic(to: ByStr20)
  RequireNonZeroAddress to;
  is_valid = builtin eq multiSig _sender;
  match is_valid with
  | False =>
    error = NotMultiSigError;
    Throw error
  | True =>
    current_block_number <- & BLOCKNUMBER;
    logic := to;
    e = { 
      _eventname: "ProxyUpdated";
      address: to;
      when: current_block_number
    };
    event e
  end
end

procedure SampleZRC2Transfer_(token_address: ByStr20, from: ByStr20, to: ByStr20, amount: Uint128)
  current_logic <- logic;
  RequireNonZeroAddress current_logic;
  msg_to_act = {
    _tag: "SampleZRC2Transfer";
    _recipient: current_logic;
    _amount: Uint128 0;
    token_address: token_address;
    from: from;
    to: to;
    amount: amount
  };
  msgs = one_msg msg_to_act;
  send msgs
end

procedure SetOrder_ (order: OrderParam)
  current_logic <- logic;
  RequireNonZeroAddress current_logic;
  msg_to_set_order = {
    _tag: "SetOrder";
    _recipient: current_logic;
    _amount: Uint128 0;
    order: order
  };
  msgs = one_msg msg_to_set_order;
  send msgs
end

procedure SetBatchOrder_ (order_list: OrderParam)
  current_logic <- logic;
  RequireNonZeroAddress current_logic;
  msg_to_set_order = {
    _tag: "SetBatchOrder";
    _recipient: current_logic;
    _amount: Uint128 0;
    order_list: order_list
  };
  msgs = one_msg msg_to_set_order;
  send msgs
end

transition SampleZRC2Transfer(token_address: ByStr20, from: ByStr20, to: ByStr20, amount: Uint128)
  SampleZRC2Transfer_ token_address from to amount
end

transition SetOrder(order: OrderParam)
  SetOrder_ order
end

transition SetBatchOrder(order_list: OrderParam)
  SetBatchOrder_ order_list
end
