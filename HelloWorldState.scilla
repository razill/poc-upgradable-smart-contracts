(* SPDX-License-Identifier: GPL-3.0 *)
scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils IntUtils

library HelloWorldState

let zero_address = 0x0000000000000000000000000000000000000000
let false = False
let true = True

(* Error exceptions *)
type Error =
  | NotMultiSigError
  | NotOperatorError
  | ZeroAddressError

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | NotMultiSigError                    => Int32 -1
      | NotOperatorError                    => Int32 -2
      | ZeroAddressError                    => Int32 -3
      end
    in
    { _exception : "Error"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract HelloWorldState(multiSig: ByStr20)

field operators: Map ByStr20 Bool = Emp ByStr20 Bool
field welcome_msg : String = ""

(* Procedures *)
procedure Throw(error : Error)
  e = make_error error;
  throw e
end

procedure RequireNonZeroAddress(to: ByStr20)
  (* Reference: https://github.com/ConsenSys/smart-contract-best-practices/blob/master/docs/tokens.md *)
  is_zero_address = builtin eq to zero_address;
  match is_zero_address with
  | False =>
  | True =>
    error = ZeroAddressError;
    Throw error
  end
end

procedure RequireOperator()
  is_operator_exist <- exists operators[_sender];
  match is_operator_exist with
  | True =>
  | False =>
    error = NotOperatorError;
    Throw error
  end
end

transition updateOperator(to: ByStr20, status: Bool)
  is_valid = builtin eq multiSig _sender;
  match is_valid with
  | False =>
    error = NotMultiSigError;
    Throw error
  | True =>
    cur_bnum <- & BLOCKNUMBER;  
    operators[to] := status;
    e = {_eventname : "OperatorUpdated"; when : cur_bnum};
    event e
  end
end

transition SetHello (msg : String)
  RequireOperator;
  welcome_msg := msg;
  e = { _eventname : "SetHello"; caller: _sender };
  event e
end

transition GetHello ()
  r <- welcome_msg;
  e = {_eventname: "GetHello"; msg: r};
  event e
end