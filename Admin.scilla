(* SPDX-License-Identifier: GPL-3.0 *)
scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils IntUtils

library Admin

let zero_address = 0x0000000000000000000000000000000000000000
let false = False
let true = True

let one_msg = 
  fun (msg : Message) => 
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

(* Error exceptions *)
type Error =
  | NotPausedError
  | PausedError
  | ZeroAddressError
  | NotMultiSigError

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | NotPausedError                      => Int32 -1
      | PausedError                         => Int32 -2
      | ZeroAddressError                    => Int32 -3
      | NotMultiSigError                    => Int32 -4
      end
    in
    { _exception : "Error"; source : "Admin"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract Admin(multiSig: ByStr20)

field proxy: ByStr20 = zero_address

field is_paused: Bool = false

(* Procedures *)
procedure Throw(error : Error)
  e = make_error error;
  throw e
end

procedure RequireNonZeroAddress(to: ByStr20)
  (* Reference: https://github.com/ConsenSys/smart-contract-best-practices/blob/master/docs/tokens.md *)
  is_zero_address = builtin eq to zero_address;
  match is_zero_address with
  | False =>
  | True =>
    error = ZeroAddressError;
    Throw error
  end
end

procedure SetHello_(msg_to_send : String)
  current_proxy <- proxy;
  RequireNonZeroAddress current_proxy;
  msg = {
    _tag: "SetHello";
    _recipient: current_proxy;
    _amount: Uint128 0;
    msg: msg_to_send
  };
  msgs = one_msg msg;
  send msgs
end

(* @multi-sig *)
transition updateProxy(to: ByStr20)
  RequireNonZeroAddress to;
  is_valid = builtin eq multiSig _sender;
  match is_valid with
  | False =>
    error = NotMultiSigError;
    Throw error
  | True =>
    current_block_number <- & BLOCKNUMBER;
    proxy := to;
    e = { 
      _eventname: "ProxyUpdated";
      address: to;
      when: current_block_number
    };
    event e
  end
end

transition SetHello (msg : String)
  SetHello_ msg
end